---
description: 
globs: 
alwaysApply: true
---
# PhantomLite — Engineering Ruleset  
**Version 1.0 · April 17 2025**  
> **Static charter:** This document defines the *permanent* engineering ground rules for the PhantomLite codebase. Changes are only allowed through the formal procedure described in §11. If you see a mismatch between practice and policy, fix the code—not the policy—unless you earn a super‑majority approval to update this file.

---

## 1 ▸ Directory & Slice Structure (root: Platform_AI_game)

```
/                 (git root)
│
├─ conanfile.txt          ── external dependencies
├─ CMakePresets.json      ── reproducible build configs
│
├─ src/
│   ├─ core/              ── engine loop, renderer bootstrap, platform glue
│   ├─ features/          ── **vertical slices** (each dungeon/system)
│   │    ├─ player/
│   │    │    ├─ player.hpp / .cpp  (organism)
│   │    │    ├─ atoms/             (isolated funcs/classes ≤150 LOC)
│   │    │    ├─ molecules/         (2–3 related atoms)
│   │    │    ├─ types.hpp          (slice‑only structs)
│   │    │    ├─ shaders/           (GLSL exclusive to slice)
│   │    │    ├─ README.md          (context primer)
│   │    │    └─ tests/             (Catch2 unit tests)
│   │    ├─ inventory/
│   │    └─ temple_of_the_ocean/
│   ├─ shared/            ── **pure** helpers used by ≥2 slices
│   └─ agents/            ── throw‑away scripts ≤800 LOC single‑file
│
├─ assets/
│   ├─ maps/               (.tmx or .json from Tiled)
│   ├─ sprites/            (.png, ≤512×512 atlases)
│   └─ audio/              (.ogg, .wav)
│
├─ tests/
│   └─ integration/        (headless/full‑game Catch2 tests)
│
└─ .github/ or .gitlab/    (CI config, commit templates)
```

### 1.1  Slice Ground Rules
* **Self‑contained:** no `#include "../other_slice/..."`. Expose public API only via the slice’s `*.hpp` organism.
* **LOC Guard:** *File* ≤ 300 LOC; *atom* ≤ 150 LOC. CI fails if breached.
* **Depth Guard:** max 3 levels under `features/`: `player/atoms/dash.cpp` is legal, deeper is not.

### 1.2  Shared Helpers
* Pure, side‑effect‑free, stateless only (e.g. `math.hpp`, `string_utils.hpp`).
* Must have companion unit tests in `shared/tests/`.

### 1.3  Agents
* One‑shot experiments or prototypes live in `agents/*.cpp` (or .py). When >800 LOC or reused twice → promote to slice.

---

## 2 ▸ Build & Environment

| Task                        | Command (from repo root)                             |
|-----------------------------|------------------------------------------------------|
| Configure deps              | `conan profile detect --force`                       |
| Install / lock deps         | `conan install . --output-folder=build --build=missing` |
| Generate build files        | `cmake --preset=default`                             |
| Build game                  | `cmake --build --preset=default --target game`       |
| Run game                    | `./build/game`                                       |
| Run unit tests              | `./build/tests`                                      |
| Run integration tests only  | `./build/tests [integration]`                        |

* **Compilers:** clang 15+ or gcc 13+. Use the toolchain file committed in `/cmake/`.
* **C++ Standard:** `-std=c++17` (no exceptions allowed unless whitelisted in this doc).
* **Warnings:** `-Wall -Wextra -Werror -Wshadow -Wconversion -pedantic`.
* **Sanitizers:** Address + Undefined enabled in Debug; disabled in Release.

---

## 3 ▸ Coding Conventions

### 3.1  File‑level
* **Encoding:** UTF‑8 w/o BOM. CI checks `file --mime-encoding`.
* **Header first lines:**
  ```cpp
  /// player.hpp — public API for the Player slice (movement, combat)
  ```

### 3.2  Naming
* **Files:** `snake_case.cpp` / `.hpp`.
* **Namespaces:** match slice name: `namespace player { ... }`.
* **Classes:** `PascalCase`; **functions/vars:** `snake_case`.
* **Constants:** `UPPER_SNAKE_CASE` (#define banned; use `constexpr`).

### 3.3  Includes & Forward Decls
* Never include headers from another slice; instead include its public API header.
* Use forward declarations whenever possible. One `#include` per line, sorted ASCII.

### 3.4  Language & STL subset
* **Allowed:** smart pointers, `std::array`, `std::vector`, ranges (C++20 when compiler enables), `std::optional`.
* **Banned:** RTTI, dynamic_cast, exceptions (use `expected` pattern), raw `new/delete` outside of `core/memory.hpp`.
* All files must compile with `-fno-exceptions` and `-fno-rtti` flags.

### 3.5  Shaders
* `.vs` / `.fs` files live beside slice code when exclusive, else in `assets/shaders/`.
* All shaders must compile at startup; failures abort with clear log.

---

## 4 ▸ Testing Rules

1. **Framework:** Catch2 v3.
2. **Unit tests** lie under `features/<slice>/tests/`. They may only link slice code + shared.
3. **Integration tests** under `tests/integration/` link the whole game; tag with `[integration]`.
4. **Slow / GPU tests** tagged `[slow]`; CI runs them on nightly workflow.
5. **Coverage goal:** ≥85 % lines on `src/features/` (excluding generated code).

---

## 5 ▸ Asset Pipeline

* **Maps:** Author in Tiled; export `.tmx`. A 200‑line `tools/tmx_import.py` converts to binary chunk on build.
* **Sprites:** Commit *original* layered .aseprite files under `assets_src/`; pipeline exports packed atlases.
* **Audio:** .wav masters → .ogg @ 96 kbps via `tools/encode_audio.sh`.
* **Hot reload:** Engine watches `assets/` in Debug; MD5‑compare on Reload key (F5).

---

## 6 ▸ Performance Budgets

| Metric                      | Target | Hard Ceiling |
|-----------------------------|--------|--------------|
| CPU frame time (1080p)      | ≤ 2 ms | 4 ms         |
| Draw calls per frame        | ≤ 250  | 500          |
| Memory usage (Release)      | ≤ 64 MB| 128 MB       |
| Start‑up time (SSD)         | ≤ 1 s  | 2 s          |

Hot‑path functions must carry a `// PERF:` comment with current micro‑benchmark numbers.

---

## 7 ▸ Git & CI

* **Commit message template:**
  ```
  <slice>: <imperative summary>

  Body: What, Why, and any perf numbers.
  Fixes #<issue>
  ```
* **Branch naming:** `feat/<slice>-<topic>`, `fix/<slice>-<bug>`.
* **Pre‑commit hooks:** clang-format, include‑guard checker, LOC guard, `clang-tidy -quiet`.
* **CI stages:** Lint → Build (Debug & Release) → Test → Package → Deploy.

---

## 8 ▸ Review & Approval Process

* **2 LGTM** rule: At least two peers must approve PR; author cannot self‑merge.
* **Size limit:** PR > 1 000 LOC diff (excluding assets) must be split.
* **Checklist:** Author confirms: tests pass, benches unchanged, docs updated.

---

## 9 ▸ Deprecation & TODO Policy

* Use `// TODO(username, YYYY‑MM‑DD): ...`. CI fails if TODO older than 60 days.
* Use `// HACK:` for temporary hacks **and** create a follow‑up issue.

---

## 10 ▸ Golden Path for a New Slice

1. `scripts/new_slice.sh <name>` scaffolds directory, CMake target, README, test skeleton.
2. Implement *one* atom, write its test, commit.
3. Flesh out molecules, keep file ≤300 LOC.
4. Document usage in slice README under “Context Primer”.
5. Bench & profile; then request code review.

---

## 11 ▸ Versioning & Change Control (Static Charter Enforcement)

1. **Immutable by default:** This ruleset is the reference contract for every contributor. Deviations must be justified in code, not by editing this file.
2. **Change classifcation:**
   * **Patch (x.y.+1):** Typos or clarifying wording that *don’t* change behavior. Requires one maintainer review.
   * **Minor (x.+1.0):** Rule clarifications or additions that don’t relax constraints. Requires PR + 3 approvals, one of which must be the Tech‐Lead.
   * **Major (+1.0.0):** Any relaxation of constraints or architectural overhaul. Requires RFC, architecture review, and unanimous core‑maintainer vote.
3. **PR checklist for rule change:**
   * Update `Version` line at top.
   * Provide migration guide if codebase impact > 50 LOC.
   * CI verifies version in file is bumped.
4. **Changelog:** Append an entry to `docs/CHANGELOG.md` under “Ruleset” section detailing why and what.

---

## 12 ▸ License

All code, shaders, and tools are © 2025 PhantomLite contributors, dual‑licensed under **MIT + CC‑BY‑SA 4.0** for assets unless otherwise noted.

---

*When in doubt, assume the strictest interpretation of these rules. That’s cheaper than retrofitting order after the fact.*

